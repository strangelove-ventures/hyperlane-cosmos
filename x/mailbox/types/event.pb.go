// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/mailbox/v1/event.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Mailbox dispatch event
type DispatchEvent struct {
	Version     uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce       uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Origin      uint32 `protobuf:"varint,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Sender      string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	Destination uint32 `protobuf:"varint,5,opt,name=destination,proto3" json:"destination,omitempty"`
	Recipient   string `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Body        string `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *DispatchEvent) Reset()         { *m = DispatchEvent{} }
func (m *DispatchEvent) String() string { return proto.CompactTextString(m) }
func (*DispatchEvent) ProtoMessage()    {}
func (*DispatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2164b61ed173e46, []int{0}
}

func (m *DispatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *DispatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *DispatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchEvent.Merge(m, src)
}

func (m *DispatchEvent) XXX_Size() int {
	return m.Size()
}

func (m *DispatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchEvent proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DispatchEvent)(nil), "hyperlane.mailbox.v1.DispatchEvent")
}

func init() { proto.RegisterFile("hyperlane/mailbox/v1/event.proto", fileDescriptor_a2164b61ed173e46) }

var fileDescriptor_a2164b61ed173e46 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe3, 0xef, 0xeb, 0x8f, 0x6a, 0xd4, 0xc5, 0xaa, 0x90, 0x85, 0x90, 0x89, 0x98, 0xba,
	0x34, 0x56, 0xc5, 0xc6, 0x84, 0x10, 0xdc, 0x40, 0xc7, 0x6e, 0x49, 0x7a, 0x94, 0x5a, 0x4a, 0x7c,
	0x22, 0xdb, 0x8d, 0x9a, 0x3b, 0x60, 0xe4, 0x12, 0xb8, 0x1c, 0xd8, 0x3a, 0x32, 0xa2, 0xe4, 0x46,
	0x50, 0xdc, 0x10, 0xd8, 0xce, 0xfb, 0xf8, 0x39, 0xb6, 0xfc, 0xd2, 0x70, 0x5f, 0x97, 0x60, 0xf2,
	0x58, 0x83, 0x2c, 0x62, 0x95, 0x27, 0x78, 0x94, 0xd5, 0x5a, 0x42, 0x05, 0xda, 0x45, 0xa5, 0x41,
	0x87, 0x6c, 0x31, 0x18, 0x51, 0x6f, 0x44, 0xd5, 0xfa, 0x6a, 0x91, 0x61, 0x86, 0x5e, 0x90, 0xdd,
	0x74, 0x76, 0x6f, 0x3f, 0x08, 0x9d, 0x3f, 0x29, 0x5b, 0xc6, 0x2e, 0xdd, 0x3f, 0x77, 0x77, 0x30,
	0x4e, 0xa7, 0x15, 0x18, 0xab, 0x50, 0x73, 0x12, 0x92, 0xe5, 0x7c, 0xf3, 0x13, 0xd9, 0x82, 0x8e,
	0x35, 0xea, 0x14, 0xf8, 0x3f, 0xcf, 0xcf, 0x81, 0x5d, 0xd2, 0x09, 0x1a, 0x95, 0x29, 0xcd, 0xff,
	0x7b, 0xdc, 0xa7, 0x8e, 0x5b, 0xd0, 0x3b, 0x30, 0x7c, 0x14, 0x92, 0xe5, 0x6c, 0xd3, 0x27, 0x16,
	0xd2, 0x8b, 0x1d, 0x58, 0xa7, 0x74, 0xec, 0xba, 0x37, 0xc6, 0x7e, 0xe9, 0x2f, 0x62, 0xd7, 0x74,
	0x66, 0x20, 0x55, 0xa5, 0x02, 0xed, 0xf8, 0xc4, 0x2f, 0xff, 0x02, 0xc6, 0xe8, 0x28, 0xc1, 0x5d,
	0xcd, 0xa7, 0xfe, 0xc0, 0xcf, 0xf7, 0xa3, 0x97, 0xb7, 0x9b, 0xe0, 0x71, 0xfb, 0xde, 0x08, 0x72,
	0x6a, 0x04, 0xf9, 0x6a, 0x04, 0x79, 0x6d, 0x45, 0x70, 0x6a, 0x45, 0xf0, 0xd9, 0x8a, 0x60, 0xfb,
	0x90, 0x29, 0xb7, 0x3f, 0x24, 0x51, 0x8a, 0x85, 0xb4, 0xce, 0xc4, 0x3a, 0x83, 0x1c, 0x2b, 0x58,
	0x75, 0x1f, 0x3e, 0x18, 0xb0, 0x72, 0x68, 0x6c, 0x95, 0xa2, 0x2d, 0xd0, 0xca, 0xe3, 0x50, 0xae,
	0xab, 0x4b, 0xb0, 0xc9, 0xc4, 0xd7, 0x75, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x26, 0x54,
	0xb9, 0x7e, 0x01, 0x00, 0x00,
}

func (m *DispatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x32
	}
	if m.Destination != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Destination))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if m.Origin != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Origin))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *DispatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovEvent(uint64(m.Version))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvent(uint64(m.Nonce))
	}
	if m.Origin != 0 {
		n += 1 + sovEvent(uint64(m.Origin))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Destination != 0 {
		n += 1 + sovEvent(uint64(m.Destination))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *DispatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			m.Destination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Destination |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
